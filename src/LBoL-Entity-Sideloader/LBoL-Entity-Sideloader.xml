<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LBoL-Entity-Sideloader</name>
    </assembly>
    <members>
        <member name="T:LBoLEntitySideloader.Attributes.DontOverwriteAttribute">
            <summary>
            Used on template class overridden methods.
            Will have no effect unless template uses [OverwriteVanilla] attribute.
            The annotated method will be ignored completely and never called, 
            effectively preventing the change of the respective component.
            This attribute cannot be used on types but for entities which have EntityLogic type component entity logic will not be changed if a type with [EntityLogic] is omitted.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.Attributes.EntityLogic">
            <summary>
            Used to mark entity logic classes. Ensures that there is single entity logic per definition.
            Currently EntityLogic type name must the same as entity Id.
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Attributes.EntityLogic.#ctor(System.Type)">
            <summary>
            definitionType should be specified like this `typeof(MyCardDefinition)`
            </summary>
            <param name="definitionType">Type of entity definition (concrete template implementation) to which this entity logic class belongs to.</param>
        </member>
        <member name="T:LBoLEntitySideloader.Attributes.ExternalEntityLogicAttribute">
            <summary>
            Suppress empty
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.Attributes.OverwriteVanilla">
            <summary>
            Used on template(definition) classes. 
            Indicates that changes defined in the template will be applied to a vanilla entity with Id returned by GetId().
            Which entity components should be overwritten can be controlled with [DontOverwrite] attribute.
            For entities which have EntityLogic type component entity logic will not be changed if a type with [EntityLogic] is omitted
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.BattleModifiers.ModFactory.LazyArg``1(System.Func{``0},System.Func{``0,LBoLEntitySideloader.BattleModifiers.ModUnit})">
            <summary>
            Avoids freezing the argument during early initialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getArg"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.BepinexPlugin.Reload(BepInEx.PluginInfo,System.Boolean)">
            <summary>
            Method for reloading all registered users while the game is running. Press F3 (by default) to reload in game. For debugging and development. Requires scriptengine. 
            </summary>
            <param name="scriptEngineInfo"></param>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.KwDescPos">
            <summary>
            Keyword position in card's description.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.CardKeyword">
            <summary>
            Core class for custom keywords. Meant to be subclassed if keyword needs extra properties.
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.CustomKeywords.CardKeyword.kwSEid">
            <summary>
            Identity of the keyword. Should be an Id of an existing StatusEffect which is used as localization middleman.
            Safety checks if SE actually exists are NOT performed.
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.CustomKeywords.CardKeyword.descPos">
            <summary>
            Not readonly but probably shouldn't be changed past construction.
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.CustomKeywords.CardKeyword.isVerbose">
            <summary>
            Should tooltip be NOT displayed? Overridden by key SE config.IsVerbose
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.CustomKeywords.CardKeyword.hasExtendedKeywordName">
            <summary>
            Display customizable string when listing keyword in card description?
            Should be set only keyword construction only. If true keyword SE MUST implement IExtendedKeywordName. 
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.CustomKeywords.CardKeyword.CloneWithCard(LBoL.Core.Cards.Card,LBoL.Core.Cards.Card,LBoLEntitySideloader.CustomKeywords.CloningMethod)">
            <summary>
            Wrapper method exposing card information when cloning a card with keyword.
            </summary>
            <param name="og"></param>
            <param name="other"></param>
            <param name="cloningMethod"></param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.CustomKeywords.CardKeyword.Clone(LBoLEntitySideloader.CustomKeywords.CloningMethod)">
            <summary>
            How keyword properties should be cloned. Returning null means keyword is not clonable.
            </summary>
            <param name="cloningMethod">Optionally filter by method which performs the cloning.</param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.CustomKeywords.CardKeyword.Merge(LBoLEntitySideloader.CustomKeywords.CardKeyword)">
            <summary>
            How should current keyword be merged with another of the same type. Only matters if keyword has extra properties. 
            Performed on cloning and KeywordManager.AddCustomKeyword
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.KeywordManager">
            <summary>
            API for adding/removing/checking custom Keywords.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.IOnTooltipDisplay">
            <summary>
            Meant to be implemented on keyword SE. Execute extra logic when tooltip is displayed, i.e., move properties from keyword to SE.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.IOverrideSEBrief">
            <summary>
            Effectively override(via postfix) non-virtual StatusEffect.Brief getter. Brief description is used to display SE(keyword) tooltip.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.CustomKeywords.IExtendedKeywordName">
            <summary>
            Method controlling how extended keyword name should be displayed on card description.
            Meant to be implemented on keyword SE. CardKeyword needs hasExtendedKeywordName set for the method to be invoked.
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.AdventureTemplate.DefaultConfig">
            <summary>
            No: 0,
            Id: "",
            HostId: "",
            HostId2: "",
            Music: play specific event bgm with id "Adventure" + {music},
            HideUlt: false,
            TempArt: false
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.BulletTemplate.DefaultConfig">
            <summary>
            Name: ;
            Widget: ;
            Launch: ;
            LaunchSfx: ;
            HitBody: ;
            HitBodySfx: ;
            HitShield: ;
            HitShieldSfx: ;
            HitBlock: ;
            HitBlockSfx: ;
            Graze: ;
            GrazeSfx: ;
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.CardTemplate.DefaultConfig">
            <summary>
            Common default values for CardConfig. The values which are safe to be left as a null are left as null.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LBoLEntitySideloader.Entities.CardTemplate.MakeConfig" -->
        <member name="M:LBoLEntitySideloader.Entities.EnemyGroupTemplate.AddFormation(System.String,System.Collections.Generic.Dictionary{System.Int32,UnityEngine.Vector2},System.Reflection.Assembly)">
            <summary>
            Numbering should start from 0. First enemy from enemy list will go to slot 0, second to slot 1 and so on. Make sure enemy act order display is consistent with the game's (left to right first, then top to bottom).
            </summary>
            <param name="name"></param>
            <param name="enemyLocations"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EnemyGroupTemplate.DefaultConfig">
            <summary>
            Id : should be a string. In vanilla strings which look like numbers are used but any string can be used
            Name : 
            FormationName : preset positions for all enemy units. Must be one of available formations. Custom formations can be added with EnemyGroupTemplate.AddFormation
            Enemies : List of enemy Ids. The list order determines enemy acting order with the first entry acting first, second acting second and so on. An entry "Empty" can be added to this list indicating that the slot is empty and can be filled with summoned unit.
            EnemyType : 
            DebutTime : 
            RollBossExhibit : 
            PlayerRoot : always Vector2(-4f, 0.5f)
            PreBattleDialogName : no way to add dialog yet
            PostBattleDialogName : no way to add dialog yet 
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EnemyUnitTemplate.AddBossNodeIcon(System.String,System.Func{UnityEngine.Sprite},System.Reflection.Assembly)">
            <summary>
            icon for boss encounter node. Some circular dimension
            </summary>
            <param name="enemyUnitId"></param>
            <param name="getSprite"></param>
            <param name="callingAssembly"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EnemyUnitTemplate.DefaultConfig">
            <summary>
            Id:
            RealName: for Death Note Exhibit
            OnlyLore: presumably for characters which don't appear as enemies. But actually don't appear to do anything.
            BaseManaColor: For rolling boss shining boss exhibits
            Order:
            ModleName:
            NarrativeColor:
            Type:
            IsPreludeOpponent:
            HpLength: hp bar visual??
            MaxHpAdd: extra max hp rolled from 0 to the specified number
            MaxHp:
            Damage1:
            Damage2:
            Damage3:
            Damage4:
            Power:
            Defend: extra block/barrier?
            Count1:
            Count2:
            MaxHpHard:
            Damage1Hard:
            Damage2Hard:
            Damage3Hard:
            Damage4Hard:
            PowerHard:
            DefendHard:
            Count1Hard:
            Count2Hard:
            MaxHpLunatic:
            Damage1Lunatic:
            Damage2Lunatic:
            Damage3Lunatic:
            Damage4Lunatic:
            PowerLunatic:
            DefendLunatic:
            Count1Lunatic:
            Count2Lunatic:
            PowerLoot:
            BluePointLoot:
            Gun1:
            Gun2:
            Gun3:
            Gun4:
            </summary>
            <returns></returns>
        </member>
        <member name="P:LBoLEntitySideloader.Entities.EntityDefinition.UniqueId">
            <summary>
            Returns as unique Id of the entity, should be used to when referring to the entity in your own code. For now the result is the same as GetId().
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EntityDefinition.GetId">
            <summary>
            Must return the Id of the entity. Id is the element which binds all entity components, logic, localization, assets etc., together. There are two important requirements for an Id:
            First, it must be unique for its type, i.e. all cards must have unique Id but an exhibit could have the same Id as a card (as long as its unique among all exhibits).
            Second, if an entity has a logic component defining its behavior, the Id must be the same as that type's name. Most of the interesting entities have a logic component: cards have a concrete type extending Card, exhibit extending Exhibit and so on. It's best to use nameof(EntityLogic).
            This could result in an issue if another mod happens to use the same type name as yours. Eventually, the Sideloader might handle conflicting Ids but right now the game really expects the logic type name to be the same as the Id.
            GetId() should never be used when referring to the entity in your own code, for example, when specifying RelativeCards config property. UniqueId should be used instead. However, GetId() can and should be used when referring to file names of resources as UniqueId can vary depending on Id conflicts.
            If a definition is overwriting a vanilla entity, the GetId is used to specify which entity to overwrite by returning the Id of the entity being overwritten.
            </summary>
            <returns>IdContainer but currently it should just return a string (which will get implicitly converted to IdContainer)</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EntityDefinition.ConfigType">
            <summary>
            Config Type used by the template
            </summary>
            <returns>Type</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EntityDefinition.TemplateType">
            <summary>
            Base template class type
            </summary>
            <returns>Type</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.EntityDefinition.EntityType">
            <summary>
            Base entity logic Type (Card, Exhibit, EnemyUnit..) used by the template
            </summary>
            <returns>Type</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.GunTemplate.DefaultConfig">
            <summary>
            Id : the most important parameter. Maps gun to one or more Pieces,
            Name : technically the Id of the GunCOnfig but in reality just a cosmetic name,
            Spell : ,
            Sequence : Sequence Id,
            Animation : "shoot1", "shoot2", "shoot3" or "shoot4",
            ForceHitTime : ,
            ForceHitAnimation : ,
            ForceShowEndStartTime : ,
            Shooter : always "Direct" ?,
            ShakePower : ,
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.IntentionTemplate.SelectAltIconsSuffix(LBoL.Core.Units.Intention)">
            <summary>
            Intention can switch between several icons. Icons are identified by suffix keys supplied in IntentionImages.subSprites.
            </summary>
            <param name="intention">The custom intention</param>
            <returns>Suffix of a sub icon</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.JadeBoxTemplate.AddExhibitAtTheStart(LBoL.Core.GameRunController,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Gives player and and exhibit and removes it from the exhibit pool.
            Should be used on Jadebox.OnAdded method.
            </summary>
            <param name="gameRun"></param>
            <param name="exhibits"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.JadeBoxTemplate.DefaultConfig">
            <summary>
            Group: restricts JadeBox selection. Only one JadeBox per group can be selected. Empty string list = no restrictions
            Keywords: should be RelativeKeywords. Cosmetic tooltip keywords.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.LaserTemplate.DefaultConfig">
            <summary>
            Name : ,
            Widget : ,
            LaunchSfx : ,
            Size : ,
            Offset : ,
            Start : ,
            HitBody : effect Name,
            HitBodySfx : ,
            HitShield : ,
            HitShieldSfx : ,
            HitBlock : ,
            HitBlockSfx : ,
            Graze : ,
            GrazeSfx : ,
            </summary>
            <returns></returns>
        </member>
        <member name="F:LBoLEntitySideloader.Entities.PlayerUnitTemplate.EikiSummonInfo.spellcardId">
            <summary>
            Determines summoning spellcard visual effect and title.
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.PlayerUnitTemplate.AssociateEikiSummon">
            <summary>
            Set mirror summon for Eiki fight. Default is Reimu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.PlayerUnitTemplate.DefaultConfig">
            <summary> 
            Id : 
            ShowOrder : show order in game start panel 
            Order : ordering priority for character's cards in collection (defacto index)
            UnlockLevel : should be 0 to make character available right away
            ModleName : always ""
            NarrativeColor : color hex code
            IsSelectable : show character filter in collection??
            MaxHp : 
            InitialMana : 
            InitialMoney : 
            InitialPower : 
            UltimateSkillA : 
            UltimateSkillB : 
            ExhibitA : 
            ExhibitB : 
            DeckA : 
            DeckB : 
            DifficultyA : number from 1 to 3
            DifficultyB : number from 1 to 3
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.PlayerUnitTemplate.Consume(LBoLEntitySideloader.Resource.LocalizationOption)">
            <summary>
            Name, Title and such
            </summary>
            <param name="locOptions"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.SfxTemplate.DefaultConfig">
            <summary>
            Rep: Replay time limit
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.SfxTemplate.LoadSfxListAsync">
            <summary>
            put a single sfx for concrete id => sfx mapping. Put more to make AudioManger of the sfx randomly
            </summary>
            <returns></returns>
        </member>
        <member name="T:LBoLEntitySideloader.Entities.SpellTemplate">
            <summary>
            This template is only useful for setting enemy spell localization. 
            Player UltimateSkillTemplate should create 
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.SpellTemplate.LoadSpecialLoc(LBoLEntitySideloader.Resource.LocalizationOption,LBoL.Presentation.UI.Panels.SpellPanel)">
            <summary>
            on cast spell title
            </summary>
            <param name="locOption"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StageTemplate.ModifyStage(System.String,System.Func{LBoL.Core.Stage,LBoL.Core.Stage},System.Reflection.Assembly)">
            <summary>
            Stage RandomPools should be added or removed from rather than completely replaced
            </summary>
            <param name="Id"></param>
            <param name="stageMod"></param>
            <param name="callingAssembly"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StageTemplate.TryGetEnvObject(System.String,System.Reflection.Assembly)">
            <summary>
            Gets reference to environment object created via AddEvironmentGameobject.   
            Save to use in entity logic methods to perform actions.
            </summary>
            <param name="name"></param>
            <param name="userAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StageTemplate.CreateSimpleEnvObject(System.String,UnityEngine.Sprite)">
            <summary>
            Creates function which creates simple background object.
            Game uses 3230x1822 sprite with ppu at 100 but generally background size is pretty lenient
            </summary>
            <param name="name"></param>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StageTemplate.AddEvironmentGameobject(System.Func{UnityEngine.GameObject},System.Boolean,System.Func{UnityEngine.GameObject,UnityEngine.GameObject},System.String,System.Reflection.Assembly)">
            <summary>
            Defers env object creation after Environment.Awake is called.
            Should be used in BepinexPlugin.Awake()
            After setting root object position will be reset to 0, 0, 0. adjustAfterSettingRoot Func can be used to change that.
            </summary>
            <param name="getEvnGo"></param>
            <param name="managedByEnvironment">if true the env object can be used in StageConfig</param>
            <param name="adjustAfterSettingRoot"></param>
            <param name="overwriteName"></param>
            <param name="callingAssembly"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StageTemplate.DefaultConfig">
            <summary>
            Id : ,
            Obj0 : background environment,
            Obj1 : and so on,
            Level1 : on which (greater or equal)stage level Obj0 background should be replaced with Obj1 background?,
            Obj2 : and so on,
            Level2 : and so on,
            Obj3 : and so on,
            Level3 : and so on,
            Obj4 : and so on,
            Level4 and so on: 
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.StatusEffectTemplate.DefaultConfig">
            <summary>
            Common default values for StatusEffectConfig. The values which are safe to be left as a null are left as null.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LBoLEntitySideloader.Entities.StatusEffectTemplate.MakeConfig" -->
        <member name="M:LBoLEntitySideloader.Entities.StatusEffectTemplate.LoadSprite">
            <summary>
            128x128 image
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.UltimateSkillTemplate.DefaultConfig">
            <summary>
            Id: 
            Order: 
            PowerCost:  
            PowerPerLevel: PowerPerLevel x MaxPowerLevel = max power cap
            MaxPowerLevel: PowerPerLevel x MaxPowerLevel = max power cap
            RepeatableType: 
            Damage: 
            Value1: 
            Value2: 
            Keywords: Cosmetic Keywords. All Bombs have accuracy by default. Overwrite `Damage` getter to change that
            RelativeEffects: 
            RelativeCards: 
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.UltimateSkillTemplate.LoadSprite">
            <summary>
            Circle centered in 280x280 canvas but not touching the edges. Refer to ultSkillSpriteTemplate.png
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.UnitModelTemplate.DefaultConfig">
            <summary>
            Name : Id should be the same as EnemyUnit's;
            Type : model type: 0 - Sprite; 1 - Spine model; 3 - effect (like spirits or Kokoro masks);
            EffectName : effect Id if Type=2 is used;
            Offset : ;
            Flip : player models seem to get auto flipped?;
            Dielevel : 0, 1 or 2 0 - "UnitDeathSmall", 1 - "UnitDeath", 2 - "UnitDeathLarge";
            Box : collision box size. Player sized units it's (0.80f, 1.80f);
            Shield : barrier? effect radius;
            Block : block? effect radius;
            Hp : hp bar position;
            HpLength : hp bar length;
            Info : ;
            Select : ;
            ShootStartTime : ;
            ShootPoint : ;
            ShooterPoint : actual shoot position is the sum of these to point?;
            Hit : ;
            HitRep : ;
            GuardRep : ;
            Chat : ;
            ChatPortraitXY : ;
            ChatPortraitWH : ;
            HasSpellPortrait : should load extra sprite for bomb cast;
            SpellPosition : scale of this vector is in 100s;
            SpellScale : ;
            SpellColor : 4 color values or empty. If the list is empty UnitView.GetDefaultSpellColors will be used;
            
            this config is for player sized models 2do
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Entities.UnitModelTemplate.LoadLocalization">
            <summary>
            Default:, Short: and Long: . Default is mandatory. 
            For name display above model and naming playable character 
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.EntityManager.AddPostLoadAction(System.Action,System.Reflection.Assembly)">
            <summary>
            Add an action which will be executed after all main entities were loaded.
            Should be called from BePinEx Awake injection point.
            Currently used for template gen.
            </summary>
            <param name="action"></param>
            <param name="callingAssembly"></param>
        </member>
        <member name="M:LBoLEntitySideloader.ExtraFunc.CardHelper.FakeQueueConsumingMana">
            <summary>
            Queues empty entry to BattleManaPanel._consumingDequeu
            Should not be used unless some very specific behavior is desired.
            Use AutoCastAction instead.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LBoLEntitySideloader.ExtraFunc.CoroutineExtender" -->
        <member name="F:LBoLEntitySideloader.ExtraFunc.CoroutineExtender.midEnums">
            <summary>
            Each enumerator in the list is yielded after target_enumerator yields a result.
            That means last midEnum can sometimes be equivalent to postEnum.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.GameFixes.CardPerformAction_Patch">
            <summary>
            Makes vfx and sfx optionally delayed in perform array
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.HookPoints.InitializeRestAsync_Patch">
            <summary>
            hook after all the vanilla configs, entities, assets and localization have been loaded. Can be used to specifically modify vanilla properties
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.IdContainer">
            <summary>
            Can be either string or int and switch between the two (almost) seamlessly.
            However, almost all entities use string as Id except for Piece and Exp 
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData">
            <summary>
            Template for persistent data container class.
            Extending types should contain fields for values to be stored.
            Logic for saving/restoring the values should be implemented in appropriate methods.
            
            Note1: Values are encoded/decoded as yaml so some limitations apply. Example: LBoL.Core.SaveData.GameSaveData
            Note2: Binary yaml files, suffixed with profile index and ".modd", are stored in game's save data folder. The files are never deleted, only overwritten.
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.filePrefix">
            <summary>
            Gr for "gameRun".
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.RegisterCustomSaveData(LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData,System.String)">
            <summary>
            Registers CustomGameRunSaveData.
            </summary>
            <param name="GUID">Must be a unique GUID. Best to use the same GUID as Bepinex plugin.</param>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.RegisterSelf(System.String)">
            <summary>
            Registers self.
            </summary>
            <param name="GUID">Must be a unique GUID. Best to use the same GUID as Bepinex plugin.</param>
        </member>
        <member name="P:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.Name">
            <summary>
            Optional override for unique name of save data file. Needed if using several CustomSaveData per mod.
            </summary>
        </member>
        <member name="P:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.EncodeToBinary">
            <summary>
            Encode yaml save files to binary? (not implemented)
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.TypeConverters">
            <summary>
            Provide type converters for yaml serialization/deserialization 
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.ReasonableUniqueName">
            <summary>
            A good override for unique name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.Save(LBoL.Core.GameRunController)">
            <summary>
            One of two main requirements for data container class. The method is called when gameRun attempts to save. Should assign the relevant custom values from gameRun data to data container fields.
            </summary>
            <param name="gameRun"></param>
        </member>
        <member name="M:LBoLEntitySideloader.PersistentValues.CustomGameRunSaveData.Restore(LBoL.Core.GameRunController)">
            <summary>
            One of two main requirements for data container class. The method is called when gameRun is being loaded. Should populate custom gameRun values with values from container fields.
            </summary>
            <param name="gameRun"></param>
        </member>
        <member name="T:LBoLEntitySideloader.ReflectionHelpers.ConfigReflection">
            <summary>
            Reflection methods for working with Config types.
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.BatchLocalization.#ctor(LBoLEntitySideloader.Resource.IResourceSource,System.Type,LBoL.Core.Locale,System.String,System.Boolean)">
            <summary>
            Adds default locale file.
            </summary>
            <param name="resourceSource"></param>
            <param name="templateType"></param>
            <param name="defaultLocale"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.BatchLocalization.AddEntity(LBoLEntitySideloader.Entities.EntityDefinition)">
            <summary>
            Register an entity for that particular batch localization.
            The corresponding batch yaml file(s) 
            </summary>
            <param name="entityTemplate"></param>
            <returns>The same BatchLocalization which should be returned by LoadLocalization</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.BatchLocalization.#ctor(LBoLEntitySideloader.Resource.IResourceSource,System.Type,System.String,LBoL.Core.Locale,System.Boolean)">
            <summary>
            Automatically tries to discover localization files for any possible locale. 
            Calls DiscoverAndLoadLocFiles(fileNamePrefix).
            </summary>
            <param name="resourceSource"></param>
            <param name="templateType"></param>
            <param name="fileNamePrefix"></param>
            <param name="fallbackLocale"></param>
            <param name="mergeTerms"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.BatchLocalization.DiscoverAndLoadLocFiles(System.String)">
            <summary>
            Automatically discovers localization files in given resource source. 
            Should be called once per instance of BatchLocalization. 
            </summary>
            <param name="fileNamePrefix">File name without locale code and ".yaml", i.e, Cards</param>
        </member>
        <member name="T:LBoLEntitySideloader.Resource.CardImages">
            <summary>
            Container class for storing any Texture2D a card might use
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.CardImages.main">
            <summary>
            primary card image. Any aspect ratio of 452x312 will do. 
            The card image will be scaled to 452x312 no matter the original size. 
            743x512 is the size vanilla images are using so there's not much point using larger ones.
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.CardImages.upgrade">
            <summary>
            [optional] card image after upgrading the card
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.CardImages.subs">
            <summary>
            [optional] dictionary subArtistName => alternativeImage
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.DirectorySource.#ctor(System.String,System.String)">
            <summary>
            plugin dir + path.
            </summary>
            <param name="GUID"></param>
            <param name="subFolder"></param>
        </member>
        <member name="T:LBoLEntitySideloader.Resource.EffectWidgetData">
            <summary>
            Class for creating gameObject with EffectWidget
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.EffectWidgetData.#ctor(UnityEngine.GameObject,System.Collections.Generic.Queue{LBoLEntitySideloader.Resource.EffectWidgetData.ExtraElementProperties},System.Collections.Generic.Queue{LBoLEntitySideloader.Resource.EffectWidgetData.ExtraElementProperties},LBoLEntitySideloader.Resource.EffectWidgetData.SortingLayer,System.String)">
            <summary>
            See EffectWidgetData.CreateEffect
            </summary>
            <param name="effectGo"></param>
            <param name="particleSystemProperties"></param>
            <param name="trailRendererProperties"></param>
            <param name="sortingLayer"></param>
            <param name="nameOverwrite"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.EffectWidgetData.CreateEffect(UnityEngine.GameObject,System.Collections.Generic.Queue{LBoLEntitySideloader.Resource.EffectWidgetData.ExtraElementProperties},System.Collections.Generic.Queue{LBoLEntitySideloader.Resource.EffectWidgetData.ExtraElementProperties},LBoLEntitySideloader.Resource.EffectWidgetData.SortingLayer,System.String)">
            <summary>
            Adds EffectWidget Monobehaviour to effectGo.
            effectGo should be a prefab loaded via AssetBundle with all visual Particle/Trail systems in its children gameObjects.
            Loading via AssetBundle or Addressables is important as this is pretty much only way to load gameObject in memory but not instantiate it in a scene.
            Additional minor properties can be provided to Particle/Trail systems via queue arguments.
            First element in the queue will go to the first system discovered (the top most in the hierarchy), second element to the second discovered and so on.
            When queue has only one element remaining, the properties of the element will be applied to any systems discovered afterwards. This way a queue with single element can be provided to apply the same properties to all the systems.
            If queue is null defaultProps will be used.
            </summary>
            <param name="effectGo"></param>
            <param name="particleSystemProperties"></param>
            <param name="trailRendererProperties"></param>
            <param name="sortingLayer"></param>
            <param name="nameOverwrite"></param>
            <returns></returns>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.ExhibitSprites.main">
            <summary>
            512x512 image
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.ExhibitSprites.customSprites">
            <summary>
            [optional] alternative images when some conditions have been met. Override OverrideIconName method to specify the condition, example, Mokou's Lighter LBoL.EntityLib.Exhibits.Adventure.Dahuoji. Additional sprites will cached to ResourcesHelper.Sprites dictionary. UniqueId will be prefixed for each of the keys in this dictionary when caching which will be needed when OverrideIconName tries to set a sprite
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.ExtraIcons.icons">
            <summary>
            Keys should be suffixes for values returned in OverrideIconName. OverrideIconName should return entityId + suffix.
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.Resource.GlobalLocalization">
            <summary>
            Should have been called BatchLocalization.
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.GlobalLocalization.#ctor(LBoLEntitySideloader.Resource.IResourceSource,System.Boolean)">
            <summary>
            mergeTerms is misleading here. 
            It will only apply if localization files are set for the first time for the type
            </summary>
            <param name="source"></param>
            <param name="mergeTerms"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.GlobalLocalization.DiscoverAndLoadLocFiles(LBoLEntitySideloader.Entities.EntityDefinition)">
            <summary>
            Automatically discovers localization files in given resource source.
            Files names should follow convention of {templateType} + {2 letter lang code} + ".yaml", i.e., UltimateSkillKo.yaml.
            Does NOT work with certain templates which do not implement EntityType.
            </summary>
            <param name="entityTemplate">concrete template instance, probably `this`</param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.GlobalLocalization.DiscoverAndLoadLocFiles(System.String)">
            <summary>
            Automatically discovers localization files in given resource source.
            Files names should follow convention of {templateType} + {2 letter lang code} + ".yaml", i.e.,  UltimateSkillKo.yaml
            </summary>
            <param name="templateName">general template type</param>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.IntentionImages.subSprites">
            <summary>
            [optional] suffix => subSprite
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.LocalizationFiles.mergeTerms">
            <summary>
            should localization terms (Name, Description etc.) should be merged
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.Resource.ModelOption.loadSpine">
            <summary>
            Spine must have "idle" animation. Can also have "blink", "pose1" and "fly" animations. 
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PieceTemplate.DefaultConfig">
            <summary>
            Id : ,
            Type : ,
            Projectile : ,
            ShootType : 0/1/2/3,
            ParentPiece : ,
            AddParentAngle : ,
            LastWave : ,
            FollowPiece : ,
            ShootEnd : ,
            HitAmount : ,
            HitInterval : ,
            ZeroHitNotDie : ,
            Scale : ,
            Color : ,
            RootType : ,
            X : ,
            Y : ,
            Radius : ,
            RadiusA : ,
            Aim : ,
            StartTime : ,
            GInterval : ,
            Group : ,
            Way : ,
            GAngle : ,
            Range : ,
            Life : ,
            LaserLastWave : ,
            StartSpeed : ,
            StartAcc : ,
            StartAccAngle : ,
            EvStart : ,
            EvDuration : ,
            EvNumber : ,
            EvType : ,
            VanishV3 : ,
            LaunchSfx : ,
            HitBodySfx : ,
            HitAnimationSpeed : 
            </summary>
            <returns></returns>
        </member>
        <member name="T:LBoLEntitySideloader.Resource.PISuffixes">
            <summary>
            Constants used as suffixes for PlayerImages.AutoLoad method
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.Resource.PlayerImages">
            <summary>
            Container class for loading player unit images.
            Synchronous or asynchronous function can be used to load most of the sprites.
            Asynchronous methods are prioritized if both methods are provided.
            By far most efficient way of loading Sprites is by using AssetBundles. 
            However, for mod development it might more convenient to load raw image files.
            Therefore, packaging AssetBundles can be postponed to the final stage of development.
            Unity Editor 2021.3.28 and https://github.com/Unity-Technologies/AssetBundles-Browser are required to package AssetBundles
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.AutoLoad(System.String,System.Func{System.String,UnityEngine.Sprite},System.Func{System.String,Cysharp.Threading.Tasks.UniTask{UnityEngine.Sprite}},LBoLEntitySideloader.Resource.PlayerImages.UseSame,System.String,System.String)">
            <summary>
            Quickly find and init PlayerImages if image file naming convention is followed.
            Convention is defined in PISuffixes constants.
            Suffixes are wrapped with provided arguments like this: {pathPrefix}{Id}{s}{fileSuffix} where 's' is the relevant suffix.
            </summary>
            <param name="Id"></param>
            <param name="loadingAction"></param>
            <param name="asyncAction"></param>
            <param name="useSame"></param>
            <param name="fileSuffix"></param>
            <param name="pathPrefix"></param>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetInRunAvatarPic(System.Func{UnityEngine.Sprite})">
            <summary>
            some scale of 846x688
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetDefeatedIcon(System.Nullable{Cysharp.Threading.Tasks.UniTask{UnityEngine.Sprite}},System.Func{UnityEngine.Sprite})">
            <summary>
            448x306. top and bottom slightly cropped
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetWinIcon(System.Nullable{Cysharp.Threading.Tasks.UniTask{UnityEngine.Sprite}},System.Func{UnityEngine.Sprite})">
            <summary>
            448x306. top and bottom slightly cropped
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetPerfectWinIcon(System.Nullable{Cysharp.Threading.Tasks.UniTask{UnityEngine.Sprite}},System.Func{UnityEngine.Sprite})">
            <summary>
            448x306. top and bottom slightly cropped
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetCollectionIcon(System.Func{UnityEngine.Sprite})">
            <summary>
            970x236
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetSelectionCircleIcon(System.Func{UnityEngine.Sprite})">
            <summary>
            320x320 circle
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.PlayerImages.SetCardImprint(System.Func{UnityEngine.Sprite})">
            <summary>
            460x240
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Resource.ResourceLoader.LoadAudioClip(System.String,UnityEngine.AudioType,LBoLEntitySideloader.Resource.DirectorySource,System.String)">
            <summary>
            Uses UnityWebRequestMultimedia.GetAudioClip to read file from disk. Could use http(s):// protocol to fetch file from URL.
            </summary>
            <param name="name"></param>
            <param name="audioType"></param>
            <param name="source"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="F:LBoLEntitySideloader.UserInfo.definitionInstances">
            <summary>
            EntityDefinition type => EntityDefinition instance
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UserInfo.entityInfos">
            <summary>
            entity factory type => concrete entity type
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UserInfo.definition2customEntityLogicType">
            <summary>
            EntityDefinition type => entity logic type
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UserInfo.entitiesToOverwrite">
            <summary>
            definition type => attribute
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.TemplateGen.GenHelper.WrapFunc``2(System.Func{``0,``1},``0)">
            <summary>
            Captures local variables for closure function.
            More info: https://unicorn-dev.medium.com/how-to-capture-a-variable-in-c-and-not-to-shoot-yourself-in-the-foot-d169aa161aa6
            </summary>
            <typeparam name="TParam"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="locals"></param>
            <returns></returns>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.configIds">
            <summary>
            config type => used Ids
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.entity2uniqueIds">
            <summary>
            EntityDefinition type 
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.id2ConfigListIndex">
            <summary>
            configType => Id => index
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.invalidRegistrations">
            <summary>
            concrete template type
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.overwriteTracker">
            <summary>
            templateType =>+ id =>+ component string =>+ OverwiteInfo(component, defType, userInfo) 
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.generatedAssemblies">
            <summary>
            user assembly +=> generatedTemplates
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.gen2User">
            <summary>
            generated assembly +=> generating user assembly
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.typePromiseDic">
            <summary>
             generating user assembly +=> facType +=> (entityLogicType, defTypePromise)
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.unitNamesGlobalLocalizationFiles">
            <summary>
            user => yaml file
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.methodCacheDic">
            <summary>
            assembly name => method cache
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.loadoutInfos">
            <summary>
            charId +=> loadoutType +=> LoadoutInfo
            </summary>
        </member>
        <member name="F:LBoLEntitySideloader.UniqueTracker.onDemandResourceTracker">
            <summary>
            templateType => Id => definitionType
            </summary>
        </member>
        <member name="T:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher">
            <summary>
            Allows adding values to any Enum
            from: https://github.com/SlimeRancherModding/SRML/blob/main/SRML/EnumPatcher.cs
            </summary>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.AddEnumValue``1(System.String)">
            <summary>
            Add a new enum value to the given <paramref name="name"/> with the first free value
            </summary>
            <param name="name">Name of the new enum value</param>
            <returns>The new enum value</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.AddEnumValue(System.Type,System.String)">
            <summary>
            Add a new enum value to the given <paramref name="enumType"/> with the first free value
            </summary>
            <param name="enumType">Type of enum to add the value to</param>
            <param name="name">Name of the new enum value</param>
            <returns>The new enum value</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.AddEnumValue``1(System.Object,System.String)">
            <summary>
            Add a new value to the given <paramref name="value"/> 
            </summary>
            <param name="value">Value to add to the enum</param>
            <param name="name">The name of the new value</param>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.AddEnumValue(System.Type,System.Object,System.String)">
            <summary>
            Add a new value to the given <paramref name="enumType"/> 
            </summary>
            <param name="enumType">Enum to add the new value to</param>
            <param name="value">Value to add to the enum</param>
            <param name="name">The name of the new value</param>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.GetFirstFreeValue``1">
            <summary>
            Get first undefined value in an enum
            </summary>
            <returns>The first undefined enum value</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumPatcher.GetFirstFreeValue(System.Type)">
            <summary>
            Get first undefined value in an enum
            </summary>
            <param name="enumType"></param>
            <returns>The first undefined enum value</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.Parse(System.Type,System.String)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to parse</param>
            <returns>The parsed enum on success, null on failure.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to parse</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>The parsed enum on success, null on failure.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.FromInt(System.Type,System.Int32)">
            <summary>
            Converts int to enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Int to convert to enum</param>
            <returns>The enum equal to the int</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.GetAllNames(System.Type)">
            <summary>
            Gets all names in an enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <returns>The list of names in the enum</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.GetAll(System.Type)">
            <summary>
            Gets all enum values in an enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <returns>The list of all values in the enum</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.IsDefined(System.Type,System.String)">
            <summary>
            Checks if an enum is defined.
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to check</param>
            <returns>true if defined, false if not.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.HasEnumValue(System.Type,System.String)">
            <summary>
            Checks all names in an enum to see if what you need exists.
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to find</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.Parse``1(System.String,``0)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to parse</param>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The parsed enum on success, <paramref name="errorReturn"/> on failure.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.Parse``1(System.String,System.Boolean,``0)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to parse</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The parsed enum on success, <paramref name="errorReturn"/> on failure.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.FromInt``1(System.Int32)">
            <summary>
            Converts int to enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Int to convert to enum</param>
            <returns>The enum equal to the int</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.GetAllNames``1">
            <summary>
            Gets all names in an enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <returns>The list of names in the enum</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.GetAll``1(``0)">
            <summary>
            Gets all enum values in an enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The list of all values in the enum</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.IsDefined``1(System.String)">
            <summary>
            Checks if an enum is defined.
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to check</param>
            <returns>true if defined, false if not.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.EnumExtender.EnumUtils.HasEnumValue``1(System.String)">
            <summary>
            Checks all names in an enum to see if what you need exists.
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to find</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.GameObjectExtensions.IterateHierarchy(UnityEngine.Transform)">
            <summary>
            Includes root object
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:LBoLEntitySideloader.Utils.Numbers.DecimalToABC(System.Int64,System.Int32)">
            <summary>
            Converts the given decimal number to the numeral system with the
            specified radix (in the range [2, 36]).
            </summary>
            <param name="decimalNumber">The number to convert.</param>
            <param name="radix">The radix of the destination numeral system (in the range [2, 36]).</param>
            <returns></returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.Init">
            <summary>
            Initialization of static variables, should be called from main thread at project start
            </summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.IsLoading(System.String)">
            <summary>
            Check if the url is loading right now
            </summary>
            <returns>Returns true if the url is loading right now</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ClearCache">
            <summary>
            Clear cache from Memory and Disk layers for all urls
            </summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.CacheContains(System.String)">
            <summary>
            Clear cache from Memory and Disk layers for all urls
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <returns>Returns sprite</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ToSprite(UnityEngine.Texture2D,System.Single)">
            <summary>
            Converts Texture2D to Sprite
            </summary>
            <param name="texture">Texture for creation Sprite</param>
            <param name="pixelDensity">Pixel density of the Sprite</param>
            <returns>Returns sprite</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ToSprite(UnityEngine.Texture2D,UnityEngine.Vector2,System.Single)">
            <summary>
            Converts Texture2D to Sprite
            </summary>
            <param name="texture">Texture for creation Sprite</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="pixelDensity">Pixel density of the Sprite</param>
            <returns>Returns sprite</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.LoadSprite(System.String,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from web or local path and return it as Sprite
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns sprite asynchronously </returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.LoadSprite(System.String,UnityEngine.Vector2,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from web or local path and return it as Sprite
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns sprite asynchronously </returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.LoadSpriteMemoryOptimized(System.String,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Int32,UnityEngine.FilterMode,UnityEngine.SpriteMeshType,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Rect},UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from web or local path and return it as Sprite but with possible memory optimization by using compression when generating texture and option to enable mipmaps.
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns sprite asynchronously </returns>
            
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.DiskCacheContains(System.String)">
            <summary>
            Check if the image is cached on disk
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <returns>Returns true if image is cached on disk</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.DiskCacheExistsAsync(System.String)">
            <summary>
            Check if the image is cached on disk
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <returns>Returns true if image is cached on disk</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ClearDiskCache">
            <summary>
            Clear Disk cache for all urls
            </summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ClearDiskCache(System.String)">
            <summary>
            Clear Disk cache for the given url
            </summary>
            <param name="url">URL to the picture, web or local</param>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.MemoryCacheContains(System.String)">
            <summary>
            Check if the Memory cache contains sprite for the given url
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <returns>Returns true if Sprite exists in Memory cache</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SaveToMemoryCache(System.String,UnityEngine.Sprite,System.Boolean)">
            <summary>
            Save sprite to Memory cache directly. Should be used for overloading cache system
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="sprite">sprite which should be saved</param>
            <param name="replace">replace existed cached sprite if any</param>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.LoadFromMemoryCache(System.String)">
            <summary>
            Loads directly from Memory cache if exists and allowed
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <returns>Returns null if not allowed to use Memory cache or if there is no cached Sprite</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ClearMemoryCache(System.String)">
            <summary>
            Clear Memory cache for the given url
            </summary>
            <param name="url">URL to the picture, web or local</param>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.ClearMemoryCache">
            <summary>
            Clear Memory cache for all urls
            </summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.UI.Image,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from URL and set it to the Image component
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="image">Image component from Unity UI</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.UI.Image,UnityEngine.Vector2,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from URL and set it to the Image component
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="image">Image component from Unity UI</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.UI.Image[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="images">Array of Image components from Unity UI</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.TextureFormat,UnityEngine.UI.Image[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="images">Array of Image components from Unity UI</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,System.Boolean,UnityEngine.UI.Image[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="images">Array of Image components from Unity UI</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.TextureFormat,System.Boolean,UnityEngine.UI.Image[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="images">Array of Image components from Unity UI</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.Vector2,UnityEngine.TextureFormat,System.Boolean,UnityEngine.UI.Image[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="images">Array of Image components from Unity UI</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.SpriteRenderer,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from URL and set it to the SpriteRenderer component
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="spriteRenderer">SpriteRenderer components from Unity</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.SpriteRenderer,UnityEngine.Vector2,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Load image from URL and set it to the SpriteRenderer component
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="spriteRenderer">SpriteRenderer components from Unity</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.SpriteRenderer[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="spriteRenderers">Array of SpriteRenderer components from Unity</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.TextureFormat,UnityEngine.SpriteRenderer[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="spriteRenderers">Array of SpriteRenderer components from Unity</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,System.Boolean,UnityEngine.SpriteRenderer[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="spriteRenderers">Array of SpriteRenderer components from Unity</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.TextureFormat,System.Boolean,UnityEngine.SpriteRenderer[])">
            <summary>
            Load image from URL and set it to the Image components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="spriteRenderers">Array of SpriteRenderer components from Unity</param>
            <returns>Returns async task</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.ImageLoader.SetSprite(System.String,UnityEngine.Vector2,UnityEngine.TextureFormat,System.Boolean,UnityEngine.SpriteRenderer[])">
            <summary>
            Load image from URL and set it to the SpriteRenderer components
            </summary>
            <param name="url">URL to the picture, web or local</param>
            <param name="pivot">Pivot of created Sprite</param>
            <param name="textureFormat">TextureFormat for the Texture2D creation</param>
            <param name="ignoreImageNotFoundError">Ignore error if the image was not found by specified url</param>
            <param name="spriteRenderers">Array of SpriteRenderer components from Unity</param>
            <returns>Returns async task</returns>
        </member>
        <member name="F:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="P:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Extensions.Unity.ImageLoader.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
    </members>
</doc>
